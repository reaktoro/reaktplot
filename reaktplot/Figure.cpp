
#include "Figure.hpp"
#include "Plotly.hpp"

namespace reaktplot {

Figure::Figure()
: fig(Plotly::Figure())
{
}

auto Figure::show() const -> void
{
    fig.attr("update_layout")(layout);
    fig.attr("update_xaxes")(xaxis);
    fig.attr("update_yaxes")(yaxis);
    fig.attr("show")();
}

// auto Figure::title(std::string const& value)                         -> Figure& { layout["title"] = value; return *this; }
// auto Figure::title_font(std::string const& value)                    -> Figure& { layout["title_font"] = value; return *this; }
auto Figure::title_font_color(std::string const& value)                 -> Figure& { layout["title_font_color"] = value; return *this; }
auto Figure::title_font_family(std::string const& value)                -> Figure& { layout["title_font_family"] = value; return *this; }
auto Figure::title_font_size(int value)                                 -> Figure& { layout["title_font_size"] = value; return *this; }
// auto Figure::title_pad(std::string const& value)                     -> Figure& { layout["title_pad"] = value; return *this; }
auto Figure::title_pad_b(int value)                                     -> Figure& { layout["title_pad_b"] = value; return *this; }
auto Figure::title_pad_l(int value)                                     -> Figure& { layout["title_pad_l"] = value; return *this; }
auto Figure::title_pad_r(int value)                                     -> Figure& { layout["title_pad_r"] = value; return *this; }
auto Figure::title_pad_t(int value)                                     -> Figure& { layout["title_pad_t"] = value; return *this; }
auto Figure::title_text(std::string const& value)                       -> Figure& { layout["title_text"] = value; return *this; }
auto Figure::title_x(double value)                                      -> Figure& { layout["title_x"] = value; return *this; }
auto Figure::title_xanchor(std::string const& value)                    -> Figure& { layout["title_xanchor"] = value; return *this; }
auto Figure::title_xref(std::string const& value)                       -> Figure& { layout["title_xref"] = value; return *this; }
auto Figure::title_y(double value)                                      -> Figure& { layout["title_y"] = value; return *this; }
auto Figure::title_yanchor(std::string const& value)                    -> Figure& { layout["title_yanchor"] = value; return *this; }
auto Figure::title_yref(std::string const& value)                       -> Figure& { layout["title_yref"] = value; return *this; }
auto Figure::showlegend(bool value)                                     -> Figure& { layout["showlegend"] = value; return *this; }
// auto Figure::legend(std::string const& value)                        -> Figure& { layout["legend"] = value; return *this; }
auto Figure::legend_bgcolor(std::string const& value)                   -> Figure& { layout["legend_bgcolor"] = value; return *this; }
auto Figure::legend_bordercolor(std::string const& value)               -> Figure& { layout["legend_bordercolor"] = value; return *this; }
auto Figure::legend_borderwidth(int value)                              -> Figure& { layout["legend_borderwidth"] = value; return *this; }
// auto Figure::legend_font(std::string const& value)                   -> Figure& { layout["legend_font"] = value; return *this; }
auto Figure::legend_font_color(std::string const& value)                -> Figure& { layout["legend_font_color"] = value; return *this; }
auto Figure::legend_font_family(std::string const& value)               -> Figure& { layout["legend_font_family"] = value; return *this; }
auto Figure::legend_font_size(int value)                                -> Figure& { layout["legend_font_size"] = value; return *this; }
auto Figure::legend_groupclick(std::string const& value)                -> Figure& { layout["legend_groupclick"] = value; return *this; }
// auto Figure::legend_grouptitlefont(std::string const& value)         -> Figure& { layout["legend_grouptitlefont"] = value; return *this; }
auto Figure::legend_grouptitlefont_color(std::string const& value)      -> Figure& { layout["legend_grouptitlefont_color"] = value; return *this; }
auto Figure::legend_grouptitlefont_family(std::string const& value)     -> Figure& { layout["legend_grouptitlefont_family"] = value; return *this; }
auto Figure::legend_grouptitlefont_size(int value)                      -> Figure& { layout["legend_grouptitlefont_size"] = value; return *this; }
auto Figure::legend_itemclick(std::string const& value)                 -> Figure& { layout["legend_itemclick"] = value; return *this; }
auto Figure::legend_itemdoubleclick(std::string const& value)           -> Figure& { layout["legend_itemdoubleclick"] = value; return *this; }
auto Figure::legend_itemsizing(std::string const& value)                -> Figure& { layout["legend_itemsizing"] = value; return *this; }
auto Figure::legend_itemwidth(int value)                                -> Figure& { layout["legend_itemwidth"] = value; return *this; }
auto Figure::legend_orientation(std::string const& value)               -> Figure& { layout["legend_orientation"] = value; return *this; }
// auto Figure::legend_title(std::string const& value)                  -> Figure& { layout["legend_title"] = value; return *this; }
// auto Figure::legend_title_font(std::string const& value)             -> Figure& { layout["legend_title_font"] = value; return *this; }
auto Figure::legend_title_font_color(std::string const& value)          -> Figure& { layout["legend_title_font_color"] = value; return *this; }
auto Figure::legend_title_font_family(std::string const& value)         -> Figure& { layout["legend_title_font_family"] = value; return *this; }
auto Figure::legend_title_font_size(int value)                          -> Figure& { layout["legend_title_font_size"] = value; return *this; }
auto Figure::legend_title_side(std::string const& value)                -> Figure& { layout["legend_title_side"] = value; return *this; }
auto Figure::legend_title_text(std::string const& value)                -> Figure& { layout["legend_title_text"] = value; return *this; }
auto Figure::legend_tracegroupgap(int value)                            -> Figure& { layout["legend_tracegroupgap"] = value; return *this; }
auto Figure::legend_traceorder(std::string const& value)                -> Figure& { layout["legend_traceorder"] = value; return *this; }
auto Figure::legend_uirevision(std::string const& value)                -> Figure& { layout["legend_uirevision"] = value; return *this; }
auto Figure::legend_valign(std::string const& value)                    -> Figure& { layout["legend_valign"] = value; return *this; }
auto Figure::legend_x(double value)                                     -> Figure& { layout["legend_x"] = value; return *this; }
auto Figure::legend_xanchor(std::string const& value)                   -> Figure& { layout["legend_xanchor"] = value; return *this; }
auto Figure::legend_y(double value)                                     -> Figure& { layout["legend_y"] = value; return *this; }
auto Figure::legend_yanchor(std::string const& value)                   -> Figure& { layout["legend_yanchor"] = value; return *this; }
// auto Figure::margin(std::string const& value)                        -> Figure& { layout["margin"] = value; return *this; }
auto Figure::margin_autoexpand(bool value)                              -> Figure& { layout["margin_autoexpand"] = value; return *this; }
auto Figure::margin_b(int value)                                        -> Figure& { layout["margin_b"] = value; return *this; }
auto Figure::margin_l(int value)                                        -> Figure& { layout["margin_l"] = value; return *this; }
auto Figure::margin_pad(int value)                                      -> Figure& { layout["margin_pad"] = value; return *this; }
auto Figure::margin_r(int value)                                        -> Figure& { layout["margin_r"] = value; return *this; }
auto Figure::margin_t(int value)                                        -> Figure& { layout["margin_t"] = value; return *this; }
auto Figure::autosize(bool value)                                       -> Figure& { layout["autosize"] = value; return *this; }
auto Figure::width(int value)                                           -> Figure& { layout["width"] = value; return *this; }
auto Figure::height(int value)                                          -> Figure& { layout["height"] = value; return *this; }
// auto Figure::font(std::string const& value)                          -> Figure& { layout["font"] = value; return *this; }
auto Figure::font_color(std::string const& value)                       -> Figure& { layout["font_color"] = value; return *this; }
auto Figure::font_family(std::string const& value)                      -> Figure& { layout["font_family"] = value; return *this; }
auto Figure::font_size(int value)                                       -> Figure& { layout["font_size"] = value; return *this; }
// auto Figure::uniformtext(std::string const& value)                   -> Figure& { layout["uniformtext"] = value; return *this; }
auto Figure::uniformtext_minsize(int value)                             -> Figure& { layout["uniformtext_minsize"] = value; return *this; }
auto Figure::uniformtext_mode(std::string const& value)                 -> Figure& { layout["uniformtext_mode"] = value; return *this; }
auto Figure::separators(std::string const& value)                       -> Figure& { layout["separators"] = value; return *this; }
auto Figure::paper_bgcolor(std::string const& value)                    -> Figure& { layout["paper_bgcolor"] = value; return *this; }
auto Figure::plot_bgcolor(std::string const& value)                     -> Figure& { layout["plot_bgcolor"] = value; return *this; }
auto Figure::autotypenumbers(std::string const& value)                  -> Figure& { layout["autotypenumbers"] = value; return *this; }
// auto Figure::colorscale(std::string const& value)                    -> Figure& { layout["colorscale"] = value; return *this; }
auto Figure::colorscale_diverging(std::string const& value)             -> Figure& { layout["colorscale_diverging"] = value; return *this; }
auto Figure::colorscale_sequential(std::string const& value)            -> Figure& { layout["colorscale_sequential"] = value; return *this; }
auto Figure::colorscale_sequentialminus(std::string const& value)       -> Figure& { layout["colorscale_sequentialminus"] = value; return *this; }
auto Figure::colorway(std::vector<std::string> const& value)            -> Figure& { layout["colorway"] = value; return *this; }
// auto Figure::modebar(std::string const& value)                       -> Figure& { layout["modebar"] = value; return *this; }
auto Figure::modebar_activecolor(std::string const& value)              -> Figure& { layout["modebar_activecolor"] = value; return *this; }
auto Figure::modebar_add(std::string const& value)                      -> Figure& { layout["modebar_add"] = value; return *this; }
auto Figure::modebar_bgcolor(std::string const& value)                  -> Figure& { layout["modebar_bgcolor"] = value; return *this; }
auto Figure::modebar_color(std::string const& value)                    -> Figure& { layout["modebar_color"] = value; return *this; }
auto Figure::modebar_orientation(std::string const& value)              -> Figure& { layout["modebar_orientation"] = value; return *this; }
auto Figure::modebar_remove(std::string const& value)                   -> Figure& { layout["modebar_remove"] = value; return *this; }
auto Figure::modebar_uirevision(std::string const& value)               -> Figure& { layout["modebar_uirevision"] = value; return *this; }
auto Figure::hovermode(std::string const& value)                        -> Figure& { layout["hovermode"] = value; return *this; }
auto Figure::clickmode(std::string const& value)                        -> Figure& { layout["clickmode"] = value; return *this; }
auto Figure::dragmode(std::string const& value)                         -> Figure& { layout["dragmode"] = value; return *this; }
auto Figure::selectdirection(std::string const& value)                  -> Figure& { layout["selectdirection"] = value; return *this; }
// auto Figure::activeselection(std::string const& value)               -> Figure& { layout["activeselection"] = value; return *this; }
auto Figure::activeselection_fillcolor(std::string const& value)        -> Figure& { layout["activeselection_fillcolor"] = value; return *this; }
auto Figure::activeselection_opacity(double value)                      -> Figure& { layout["activeselection_opacity"] = value; return *this; }
// auto Figure::newselection(std::string const& value)                  -> Figure& { layout["newselection"] = value; return *this; }
// auto Figure::newselection_line(std::string const& value)             -> Figure& { layout["newselection_line"] = value; return *this; }
auto Figure::newselection_line_color(std::string const& value)          -> Figure& { layout["newselection_line_color"] = value; return *this; }
auto Figure::newselection_line_dash(std::string const& value)           -> Figure& { layout["newselection_line_dash"] = value; return *this; }
auto Figure::newselection_line_width(int value)                         -> Figure& { layout["newselection_line_width"] = value; return *this; }
auto Figure::newselection_mode(std::string const& value)                -> Figure& { layout["newselection_mode"] = value; return *this; }
auto Figure::hoverdistance(std::string const& value)                    -> Figure& { layout["hoverdistance"] = value; return *this; }
auto Figure::spikedistance(std::string const& value)                    -> Figure& { layout["spikedistance"] = value; return *this; }
// auto Figure::hoverlabel(std::string const& value)                    -> Figure& { layout["hoverlabel"] = value; return *this; }
auto Figure::hoverlabel_align(std::string const& value)                 -> Figure& { layout["hoverlabel_align"] = value; return *this; }
auto Figure::hoverlabel_bgcolor(std::string const& value)               -> Figure& { layout["hoverlabel_bgcolor"] = value; return *this; }
auto Figure::hoverlabel_bordercolor(std::string const& value)           -> Figure& { layout["hoverlabel_bordercolor"] = value; return *this; }
// auto Figure::hoverlabel_font(std::string const& value)               -> Figure& { layout["hoverlabel_font"] = value; return *this; }
auto Figure::hoverlabel_font_color(std::string const& value)            -> Figure& { layout["hoverlabel_font_color"] = value; return *this; }
auto Figure::hoverlabel_font_family(std::string const& value)           -> Figure& { layout["hoverlabel_font_family"] = value; return *this; }
auto Figure::hoverlabel_font_size(int value)                            -> Figure& { layout["hoverlabel_font_size"] = value; return *this; }
// auto Figure::hoverlabel_grouptitlefont(std::string const& value)     -> Figure& { layout["hoverlabel_grouptitlefont"] = value; return *this; }
auto Figure::hoverlabel_grouptitlefont_color(std::string const& value)  -> Figure& { layout["hoverlabel_grouptitlefont_color"] = value; return *this; }
auto Figure::hoverlabel_grouptitlefont_family(std::string const& value) -> Figure& { layout["hoverlabel_grouptitlefont_family"] = value; return *this; }
auto Figure::hoverlabel_grouptitlefont_size(int value)                  -> Figure& { layout["hoverlabel_grouptitlefont_size"] = value; return *this; }
auto Figure::hoverlabel_namelength(std::string const& value)            -> Figure& { layout["hoverlabel_namelength"] = value; return *this; }
// auto Figure::transition(std::string const& value)                    -> Figure& { layout["transition"] = value; return *this; }
auto Figure::transition_duration(int value)                             -> Figure& { layout["transition_duration"] = value; return *this; }
auto Figure::transition_easing(std::string const& value)                -> Figure& { layout["transition_easing"] = value; return *this; }
auto Figure::transition_ordering(std::string const& value)              -> Figure& { layout["transition_ordering"] = value; return *this; }
auto Figure::datarevision(std::string const& value)                     -> Figure& { layout["datarevision"] = value; return *this; }
auto Figure::uirevision(std::string const& value)                       -> Figure& { layout["uirevision"] = value; return *this; }
auto Figure::editrevision(std::string const& value)                     -> Figure& { layout["editrevision"] = value; return *this; }
auto Figure::selectionrevision(std::string const& value)                -> Figure& { layout["selectionrevision"] = value; return *this; }
// auto template(std::string const& value)                              -> Figure&; { layout["template"] = value; return *this; }
auto Figure::meta(std::string const& value)                             -> Figure& { layout["meta"] = value; return *this; }
auto Figure::computed(std::string const& value)                         -> Figure& { layout["computed"] = value; return *this; }
// auto Figure::grid(std::string const& value)                          -> Figure& { layout["grid"] = value; return *this; }
auto Figure::grid_columns(std::string const& value)                     -> Figure& { layout["grid_columns"] = value; return *this; }
// auto Figure::grid_domain(std::string const& value)                   -> Figure& { layout["grid_domain"] = value; return *this; }
auto Figure::grid_domain_x(std::string const& value)                    -> Figure& { layout["grid_domain_x"] = value; return *this; }
auto Figure::grid_domain_y(std::string const& value)                    -> Figure& { layout["grid_domain_y"] = value; return *this; }
auto Figure::grid_pattern(std::string const& value)                     -> Figure& { layout["grid_pattern"] = value; return *this; }
auto Figure::grid_roworder(std::string const& value)                    -> Figure& { layout["grid_roworder"] = value; return *this; }
auto Figure::grid_rows(std::string const& value)                        -> Figure& { layout["grid_rows"] = value; return *this; }
auto Figure::grid_subplots(std::string const& value)                    -> Figure& { layout["grid_subplots"] = value; return *this; }
auto Figure::grid_xaxes(std::string const& value)                       -> Figure& { layout["grid_xaxes"] = value; return *this; }
auto Figure::grid_xgap(double value)                                    -> Figure& { layout["grid_xgap"] = value; return *this; }
auto Figure::grid_xside(std::string const& value)                       -> Figure& { layout["grid_xside"] = value; return *this; }
auto Figure::grid_yaxes(std::string const& value)                       -> Figure& { layout["grid_yaxes"] = value; return *this; }
auto Figure::grid_ygap(double value)                                    -> Figure& { layout["grid_ygap"] = value; return *this; }
auto Figure::grid_yside(std::string const& value)                       -> Figure& { layout["grid_yside"] = value; return *this; }
auto Figure::calendar(std::string const& value)                         -> Figure& { layout["calendar"] = value; return *this; }
// auto Figure::newshape(std::string const& value)                      -> Figure& { layout["newshape"] = value; return *this; }
auto Figure::newshape_drawdirection(std::string const& value)           -> Figure& { layout["newshape_drawdirection"] = value; return *this; }
auto Figure::newshape_fillcolor(std::string const& value)               -> Figure& { layout["newshape_fillcolor"] = value; return *this; }
auto Figure::newshape_fillrule(std::string const& value)                -> Figure& { layout["newshape_fillrule"] = value; return *this; }
auto Figure::newshape_layer(std::string const& value)                   -> Figure& { layout["newshape_layer"] = value; return *this; }
// auto Figure::newshape_line(std::string const& value)                 -> Figure& { layout["newshape_line"] = value; return *this; }
auto Figure::newshape_line_color(std::string const& value)              -> Figure& { layout["newshape_line_color"] = value; return *this; }
auto Figure::newshape_line_dash(std::string const& value)               -> Figure& { layout["newshape_line_dash"] = value; return *this; }
auto Figure::newshape_line_width(int value)                             -> Figure& { layout["newshape_line_width"] = value; return *this; }
auto Figure::newshape_opacity(double value)                             -> Figure& { layout["newshape_opacity"] = value; return *this; }
// auto Figure::activeshape(std::string const& value)                   -> Figure& { layout["activeshape"] = value; return *this; }
auto Figure::activeshape_fillcolor(std::string const& value)            -> Figure& { layout["activeshape_fillcolor"] = value; return *this; }
auto Figure::activeshape_opacity(double value)                          -> Figure& { layout["activeshape_opacity"] = value; return *this; }
auto Figure::selections(std::string const& value)                       -> Figure& { layout["selections"] = value; return *this; }
// auto Figure::selections_line(std::string const& value)               -> Figure& { layout["selections_line"] = value; return *this; }
auto Figure::selections_line_color(std::string const& value)            -> Figure& { layout["selections_line_color"] = value; return *this; }
auto Figure::selections_line_dash(std::string const& value)             -> Figure& { layout["selections_line_dash"] = value; return *this; }
auto Figure::selections_line_width(int value)                           -> Figure& { layout["selections_line_width"] = value; return *this; }
auto Figure::selections_name(std::string const& value)                  -> Figure& { layout["selections_name"] = value; return *this; }
auto Figure::selections_opacity(double value)                           -> Figure& { layout["selections_opacity"] = value; return *this; }
auto Figure::selections_path(std::string const& value)                  -> Figure& { layout["selections_path"] = value; return *this; }
auto Figure::selections_templateitemname(std::string const& value)      -> Figure& { layout["selections_templateitemname"] = value; return *this; }
auto Figure::selections_type(std::string const& value)                  -> Figure& { layout["selections_type"] = value; return *this; }
auto Figure::selections_x0(std::string const& value)                    -> Figure& { layout["selections_x0"] = value; return *this; }
auto Figure::selections_x1(std::string const& value)                    -> Figure& { layout["selections_x1"] = value; return *this; }
auto Figure::selections_xref(std::string const& value)                  -> Figure& { layout["selections_xref"] = value; return *this; }
auto Figure::selections_y0(std::string const& value)                    -> Figure& { layout["selections_y0"] = value; return *this; }
auto Figure::selections_y1(std::string const& value)                    -> Figure& { layout["selections_y1"] = value; return *this; }
auto Figure::selections_yref(std::string const& value)                  -> Figure& { layout["selections_yref"] = value; return *this; }
auto Figure::hidesources(bool value)                                    -> Figure& { layout["hidesources"] = value; return *this; }
auto Figure::extendpiecolors(bool value)                                -> Figure& { layout["extendpiecolors"] = value; return *this; }
auto Figure::hiddenlabels(std::string const& value)                     -> Figure& { layout["hiddenlabels"] = value; return *this; }
auto Figure::piecolorway(std::vector<std::string> const& value)         -> Figure& { layout["piecolorway"] = value; return *this; }
auto Figure::boxgap(double value)                                       -> Figure& { layout["boxgap"] = value; return *this; }
auto Figure::boxgroupgap(double value)                                  -> Figure& { layout["boxgroupgap"] = value; return *this; }
auto Figure::boxmode(std::string const& value)                          -> Figure& { layout["boxmode"] = value; return *this; }
auto Figure::violingap(double value)                                    -> Figure& { layout["violingap"] = value; return *this; }
auto Figure::violingroupgap(double value)                               -> Figure& { layout["violingroupgap"] = value; return *this; }
auto Figure::violinmode(std::string const& value)                       -> Figure& { layout["violinmode"] = value; return *this; }
auto Figure::bargroupgap(double value)                                  -> Figure& { layout["bargroupgap"] = value; return *this; }
auto Figure::barmode(std::string const& value)                          -> Figure& { layout["barmode"] = value; return *this; }
auto Figure::barnorm(std::string const& value)                          -> Figure& { layout["barnorm"] = value; return *this; }
auto Figure::bargap(double value)                                       -> Figure& { layout["bargap"] = value; return *this; }
auto Figure::waterfallgap(double value)                                 -> Figure& { layout["waterfallgap"] = value; return *this; }
auto Figure::waterfallgroupgap(double value)                            -> Figure& { layout["waterfallgroupgap"] = value; return *this; }
auto Figure::waterfallmode(std::string const& value)                    -> Figure& { layout["waterfallmode"] = value; return *this; }
auto Figure::funnelgap(double value)                                    -> Figure& { layout["funnelgap"] = value; return *this; }
auto Figure::funnelgroupgap(double value)                               -> Figure& { layout["funnelgroupgap"] = value; return *this; }
auto Figure::funnelmode(std::string const& value)                       -> Figure& { layout["funnelmode"] = value; return *this; }
auto Figure::extendfunnelareacolors(bool value)                         -> Figure& { layout["extendfunnelareacolors"] = value; return *this; }
auto Figure::funnelareacolorway(std::vector<std::string> const& value)  -> Figure& { layout["funnelareacolorway"] = value; return *this; }
auto Figure::extendsunburstcolors(bool value)                           -> Figure& { layout["extendsunburstcolors"] = value; return *this; }
auto Figure::sunburstcolorway(std::vector<std::string> const& value)    -> Figure& { layout["sunburstcolorway"] = value; return *this; }
auto Figure::extendtreemapcolors(bool value)                            -> Figure& { layout["extendtreemapcolors"] = value; return *this; }
auto Figure::treemapcolorway(std::vector<std::string> const& value)     -> Figure& { layout["treemapcolorway"] = value; return *this; }
auto Figure::extendiciclecolors(bool value)                             -> Figure& { layout["extendiciclecolors"] = value; return *this; }
auto Figure::iciclecolorway(std::vector<std::string> const& value)      -> Figure& { layout["iciclecolorway"] = value; return *this; }

//=================================================================================================================
//
// METHODS THAT CUSTOMIZE THE X-AXIS LAYOUT OF THE FIGURE
//
//=================================================================================================================

auto Figure::xaxis_anchor(std::string const& value)                           -> Figure& { xaxis["anchor"] = value; return *this; }
auto Figure::xaxis_automargin(std::string const& value)                       -> Figure& { xaxis["automargin"] = value; return *this; }
auto Figure::xaxis_autorange(std::string const& value)                        -> Figure& { xaxis["autorange"] = value; return *this; }
auto Figure::xaxis_autotypenumbers(std::string const& value)                  -> Figure& { xaxis["autotypenumbers"] = value; return *this; }
auto Figure::xaxis_calendar(std::string const& value)                         -> Figure& { xaxis["calendar"] = value; return *this; }
// auto Figure::xaxis_categoryarray(std::string const& value)                 -> Figure& { xaxis["categoryarray"] = value; return *this; }
auto Figure::xaxis_categoryorder(std::string const& value)                    -> Figure& { xaxis["categoryorder"] = value; return *this; }
auto Figure::xaxis_color(std::string const& value)                            -> Figure& { xaxis["color"] = value; return *this; }
auto Figure::xaxis_constrain(std::string const& value)                        -> Figure& { xaxis["constrain"] = value; return *this; }
auto Figure::xaxis_constraintoward(std::string const& value)                  -> Figure& { xaxis["constraintoward"] = value; return *this; }
auto Figure::xaxis_dividercolor(std::string const& value)                     -> Figure& { xaxis["dividercolor"] = value; return *this; }
auto Figure::xaxis_dividerwidth(int value)                                    -> Figure& { xaxis["dividerwidth"] = value; return *this; }
// auto Figure::xaxis_domain(std::string const& value)                        -> Figure& { xaxis["domain"] = value; return *this; }
auto Figure::xaxis_dtick(std::string const& value)                            -> Figure& { xaxis["dtick"] = value; return *this; }
auto Figure::xaxis_exponentformat(std::string const& value)                   -> Figure& { xaxis["exponentformat"] = value; return *this; }
auto Figure::xaxis_fixedrange(std::string const& value)                       -> Figure& { xaxis["fixedrange"] = value; return *this; }
auto Figure::xaxis_gridcolor(std::string const& value)                        -> Figure& { xaxis["gridcolor"] = value; return *this; }
auto Figure::xaxis_griddash(std::string const& value)                         -> Figure& { xaxis["griddash"] = value; return *this; }
auto Figure::xaxis_gridwidth(int value)                                       -> Figure& { xaxis["gridwidth"] = value; return *this; }
auto Figure::xaxis_hoverformat(std::string const& value)                      -> Figure& { xaxis["hoverformat"] = value; return *this; }
auto Figure::xaxis_layer(std::string const& value)                            -> Figure& { xaxis["layer"] = value; return *this; }
auto Figure::xaxis_linecolor(std::string const& value)                        -> Figure& { xaxis["linecolor"] = value; return *this; }
auto Figure::xaxis_linewidth(int value)                                       -> Figure& { xaxis["linewidth"] = value; return *this; }
auto Figure::xaxis_matches(std::string const& value)                          -> Figure& { xaxis["matches"] = value; return *this; }
auto Figure::xaxis_minexponent(int value)                                     -> Figure& { xaxis["minexponent"] = value; return *this; }
// auto Figure::xaxis_minor(std::string const& value)                         -> Figure& { xaxis["minor"] = value; return *this; }
auto Figure::xaxis_minor_dtick(std::string const& value)                      -> Figure& { xaxis["minor_dtick"] = value; return *this; }
auto Figure::xaxis_minor_gridcolor(std::string const& value)                  -> Figure& { xaxis["minor_gridcolor"] = value; return *this; }
auto Figure::xaxis_minor_griddash(std::string const& value)                   -> Figure& { xaxis["minor_griddash"] = value; return *this; }
auto Figure::xaxis_minor_gridwidth(int value)                                 -> Figure& { xaxis["minor_gridwidth"] = value; return *this; }
auto Figure::xaxis_minor_nticks(std::string const& value)                     -> Figure& { xaxis["minor_nticks"] = value; return *this; }
auto Figure::xaxis_minor_showgrid(std::string const& value)                   -> Figure& { xaxis["minor_showgrid"] = value; return *this; }
auto Figure::xaxis_minor_tick0(std::string const& value)                      -> Figure& { xaxis["minor_tick0"] = value; return *this; }
auto Figure::xaxis_minor_tickcolor(std::string const& value)                  -> Figure& { xaxis["minor_tickcolor"] = value; return *this; }
auto Figure::xaxis_minor_ticklen(int value)                                   -> Figure& { xaxis["minor_ticklen"] = value; return *this; }
auto Figure::xaxis_minor_tickmode(std::string const& value)                   -> Figure& { xaxis["minor_tickmode"] = value; return *this; }
auto Figure::xaxis_minor_ticks(std::string const& value)                      -> Figure& { xaxis["minor_ticks"] = value; return *this; }
// auto Figure::xaxis_minor_tickvals(std::string const& value)                -> Figure& { xaxis["minor_tickvals"] = value; return *this; }
auto Figure::xaxis_minor_tickwidth(int value)                                 -> Figure& { xaxis["minor_tickwidth"] = value; return *this; }
auto Figure::xaxis_mirror(std::string const& value)                           -> Figure& { xaxis["mirror"] = value; return *this; }
auto Figure::xaxis_nticks(std::string const& value)                           -> Figure& { xaxis["nticks"] = value; return *this; }
auto Figure::xaxis_overlaying(std::string const& value)                       -> Figure& { xaxis["overlaying"] = value; return *this; }
auto Figure::xaxis_position(int value)                                        -> Figure& { xaxis["position"] = value; return *this; }
// auto Figure::xaxis_range(std::string const& value)                         -> Figure& { xaxis["range"] = value; return *this; }
// auto Figure::xaxis_rangebreaks(std::string const& value)                   -> Figure& { xaxis["rangebreaks"] = value; return *this; }
// auto Figure::xaxis_rangebreaks_bounds(std::string const& value)            -> Figure& { xaxis["rangebreaks_bounds"] = value; return *this; }
auto Figure::xaxis_rangebreaks_dvalue(int value)                              -> Figure& { xaxis["rangebreaks_dvalue"] = value; return *this; }
auto Figure::xaxis_rangebreaks_enabled(std::string const& value)              -> Figure& { xaxis["rangebreaks_enabled"] = value; return *this; }
auto Figure::xaxis_rangebreaks_name(std::string const& value)                 -> Figure& { xaxis["rangebreaks_name"] = value; return *this; }
auto Figure::xaxis_rangebreaks_pattern(std::string const& value)              -> Figure& { xaxis["rangebreaks_pattern"] = value; return *this; }
auto Figure::xaxis_rangebreaks_templateitemname(std::string const& value)     -> Figure& { xaxis["rangebreaks_templateitemname"] = value; return *this; }
// auto Figure::xaxis_rangebreaks_values(std::string const& value)            -> Figure& { xaxis["rangebreaks_values"] = value; return *this; }
auto Figure::xaxis_rangemode(std::string const& value)                        -> Figure& { xaxis["rangemode"] = value; return *this; }
// auto Figure::xaxis_rangeselector(std::string const& value)                 -> Figure& { xaxis["rangeselector"] = value; return *this; }
auto Figure::xaxis_rangeselector_activecolor(std::string const& value)        -> Figure& { xaxis["rangeselector_activecolor"] = value; return *this; }
auto Figure::xaxis_rangeselector_bgcolor(std::string const& value)            -> Figure& { xaxis["rangeselector_bgcolor"] = value; return *this; }
auto Figure::xaxis_rangeselector_bordercolor(std::string const& value)        -> Figure& { xaxis["rangeselector_bordercolor"] = value; return *this; }
auto Figure::xaxis_rangeselector_borderwidth(int value)                       -> Figure& { xaxis["rangeselector_borderwidth"] = value; return *this; }
// auto Figure::xaxis_rangeselector_buttons(std::string const& value)         -> Figure& { xaxis["rangeselector_buttons"] = value; return *this; }
auto Figure::xaxis_rangeselector_count(int value)                             -> Figure& { xaxis["rangeselector_count"] = value; return *this; }
auto Figure::xaxis_rangeselector_label(std::string const& value)              -> Figure& { xaxis["rangeselector_label"] = value; return *this; }
auto Figure::xaxis_rangeselector_name(std::string const& value)               -> Figure& { xaxis["rangeselector_name"] = value; return *this; }
auto Figure::xaxis_rangeselector_step(std::string const& value)               -> Figure& { xaxis["rangeselector_step"] = value; return *this; }
auto Figure::xaxis_rangeselector_stepmode(std::string const& value)           -> Figure& { xaxis["rangeselector_stepmode"] = value; return *this; }
auto Figure::xaxis_rangeselector_templateitemname(std::string const& value)   -> Figure& { xaxis["rangeselector_templateitemname"] = value; return *this; }
// auto Figure::xaxis_rangeselector_font(std::string const& value)            -> Figure& { xaxis["rangeselector_font"] = value; return *this; }
auto Figure::xaxis_rangeselector_font_color(std::string const& value)         -> Figure& { xaxis["rangeselector_font_color"] = value; return *this; }
auto Figure::xaxis_rangeselector_font_family(std::string const& value)        -> Figure& { xaxis["rangeselector_font_family"] = value; return *this; }
auto Figure::xaxis_rangeselector_font_size(int value)                         -> Figure& { xaxis["rangeselector_font_size"] = value; return *this; }
auto Figure::xaxis_rangeselector_visible(std::string const& value)            -> Figure& { xaxis["rangeselector_visible"] = value; return *this; }
auto Figure::xaxis_rangeselector_x(int value)                                 -> Figure& { xaxis["rangeselector_x"] = value; return *this; }
auto Figure::xaxis_rangeselector_xanchor(std::string const& value)            -> Figure& { xaxis["rangeselector_xanchor"] = value; return *this; }
auto Figure::xaxis_rangeselector_y(int value)                                 -> Figure& { xaxis["rangeselector_y"] = value; return *this; }
auto Figure::xaxis_rangeselector_yanchor(std::string const& value)            -> Figure& { xaxis["rangeselector_yanchor"] = value; return *this; }
// auto Figure::xaxis_rangeslider(std::string const& value)                   -> Figure& { xaxis["rangeslider"] = value; return *this; }
auto Figure::xaxis_rangeslider_autorange(std::string const& value)            -> Figure& { xaxis["rangeslider_autorange"] = value; return *this; }
auto Figure::xaxis_rangeslider_bgcolor(std::string const& value)              -> Figure& { xaxis["rangeslider_bgcolor"] = value; return *this; }
auto Figure::xaxis_rangeslider_bordercolor(std::string const& value)          -> Figure& { xaxis["rangeslider_bordercolor"] = value; return *this; }
auto Figure::xaxis_rangeslider_borderwidth(std::string const& value)          -> Figure& { xaxis["rangeslider_borderwidth"] = value; return *this; }
// auto Figure::xaxis_rangeslider_range(std::string const& value)             -> Figure& { xaxis["rangeslider_range"] = value; return *this; }
auto Figure::xaxis_rangeslider_thickness(int value)                           -> Figure& { xaxis["rangeslider_thickness"] = value; return *this; }
auto Figure::xaxis_rangeslider_visible(std::string const& value)              -> Figure& { xaxis["rangeslider_visible"] = value; return *this; }
// auto Figure::xaxis_rangeslider_yaxis(std::string const& value)             -> Figure& { xaxis["rangeslider_yaxis"] = value; return *this; }
// auto Figure::xaxis_rangeslider_yaxis_range(std::string const& value)       -> Figure& { xaxis["rangeslider_yaxis_range"] = value; return *this; }
auto Figure::xaxis_rangeslider_yaxis_rangemode(std::string const& value)      -> Figure& { xaxis["rangeslider_yaxis_rangemode"] = value; return *this; }
auto Figure::xaxis_scaleanchor(std::string const& value)                      -> Figure& { xaxis["scaleanchor"] = value; return *this; }
auto Figure::xaxis_scaleratio(int value)                                      -> Figure& { xaxis["scaleratio"] = value; return *this; }
auto Figure::xaxis_separatethousands(std::string const& value)                -> Figure& { xaxis["separatethousands"] = value; return *this; }
auto Figure::xaxis_showdividers(std::string const& value)                     -> Figure& { xaxis["showdividers"] = value; return *this; }
auto Figure::xaxis_showexponent(std::string const& value)                     -> Figure& { xaxis["showexponent"] = value; return *this; }
auto Figure::xaxis_showgrid(std::string const& value)                         -> Figure& { xaxis["showgrid"] = value; return *this; }
auto Figure::xaxis_showline(std::string const& value)                         -> Figure& { xaxis["showline"] = value; return *this; }
auto Figure::xaxis_showspikes(std::string const& value)                       -> Figure& { xaxis["showspikes"] = value; return *this; }
auto Figure::xaxis_showticklabels(std::string const& value)                   -> Figure& { xaxis["showticklabels"] = value; return *this; }
auto Figure::xaxis_showtickprefix(std::string const& value)                   -> Figure& { xaxis["showtickprefix"] = value; return *this; }
auto Figure::xaxis_showticksuffix(std::string const& value)                   -> Figure& { xaxis["showticksuffix"] = value; return *this; }
auto Figure::xaxis_side(std::string const& value)                             -> Figure& { xaxis["side"] = value; return *this; }
auto Figure::xaxis_spikecolor(std::string const& value)                       -> Figure& { xaxis["spikecolor"] = value; return *this; }
auto Figure::xaxis_spikedash(std::string const& value)                        -> Figure& { xaxis["spikedash"] = value; return *this; }
auto Figure::xaxis_spikemode(std::string const& value)                        -> Figure& { xaxis["spikemode"] = value; return *this; }
auto Figure::xaxis_spikesnap(std::string const& value)                        -> Figure& { xaxis["spikesnap"] = value; return *this; }
auto Figure::xaxis_spikethickness(int value)                                  -> Figure& { xaxis["spikethickness"] = value; return *this; }
auto Figure::xaxis_tick0(std::string const& value)                            -> Figure& { xaxis["tick0"] = value; return *this; }
auto Figure::xaxis_tickangle(std::string const& value)                        -> Figure& { xaxis["tickangle"] = value; return *this; }
auto Figure::xaxis_tickcolor(std::string const& value)                        -> Figure& { xaxis["tickcolor"] = value; return *this; }
// auto Figure::xaxis_tickfont(std::string const& value)                      -> Figure& { xaxis["tickfont"] = value; return *this; }
auto Figure::xaxis_tickfont_color(std::string const& value)                   -> Figure& { xaxis["tickfont_color"] = value; return *this; }
auto Figure::xaxis_tickfont_family(std::string const& value)                  -> Figure& { xaxis["tickfont_family"] = value; return *this; }
auto Figure::xaxis_tickfont_size(int value)                                   -> Figure& { xaxis["tickfont_size"] = value; return *this; }
auto Figure::xaxis_tickformat(std::string const& value)                       -> Figure& { xaxis["tickformat"] = value; return *this; }
// auto Figure::xaxis_tickformatstops(std::string const& value)               -> Figure& { xaxis["tickformatstops"] = value; return *this; }
// auto Figure::xaxis_tickformatstops_dtickrange(std::string const& value)    -> Figure& { xaxis["tickformatstops_dtickrange"] = value; return *this; }
auto Figure::xaxis_tickformatstops_enabled(std::string const& value)          -> Figure& { xaxis["tickformatstops_enabled"] = value; return *this; }
auto Figure::xaxis_tickformatstops_name(std::string const& value)             -> Figure& { xaxis["tickformatstops_name"] = value; return *this; }
auto Figure::xaxis_tickformatstops_templateitemname(std::string const& value) -> Figure& { xaxis["tickformatstops_templateitemname"] = value; return *this; }
auto Figure::xaxis_tickformatstops_value(std::string const& value)            -> Figure& { xaxis["tickformatstops_value"] = value; return *this; }
auto Figure::xaxis_ticklabelmode(std::string const& value)                    -> Figure& { xaxis["ticklabelmode"] = value; return *this; }
auto Figure::xaxis_ticklabeloverflow(std::string const& value)                -> Figure& { xaxis["ticklabeloverflow"] = value; return *this; }
auto Figure::xaxis_ticklabelposition(std::string const& value)                -> Figure& { xaxis["ticklabelposition"] = value; return *this; }
auto Figure::xaxis_ticklabelstep(std::string const& value)                    -> Figure& { xaxis["ticklabelstep"] = value; return *this; }
auto Figure::xaxis_ticklen(int value)                                         -> Figure& { xaxis["ticklen"] = value; return *this; }
auto Figure::xaxis_tickmode(std::string const& value)                         -> Figure& { xaxis["tickmode"] = value; return *this; }
auto Figure::xaxis_tickprefix(std::string const& value)                       -> Figure& { xaxis["tickprefix"] = value; return *this; }
auto Figure::xaxis_ticks(std::string const& value)                            -> Figure& { xaxis["ticks"] = value; return *this; }
auto Figure::xaxis_tickson(std::string const& value)                          -> Figure& { xaxis["tickson"] = value; return *this; }
auto Figure::xaxis_ticksuffix(std::string const& value)                       -> Figure& { xaxis["ticksuffix"] = value; return *this; }
// auto Figure::xaxis_ticktext(std::string const& value)                      -> Figure& { xaxis["ticktext"] = value; return *this; }
// auto Figure::xaxis_tickvals(std::string const& value)                      -> Figure& { xaxis["tickvals"] = value; return *this; }
auto Figure::xaxis_tickwidth(int value)                                       -> Figure& { xaxis["tickwidth"] = value; return *this; }
// auto Figure::xaxis_title(std::string const& value)                         -> Figure& { xaxis["title"] = value; return *this; }
// auto Figure::xaxis_title_font(std::string const& value)                    -> Figure& { xaxis["title_font"] = value; return *this; }
auto Figure::xaxis_title_font_color(std::string const& value)                 -> Figure& { xaxis["title_font_color"] = value; return *this; }
auto Figure::xaxis_title_font_family(std::string const& value)                -> Figure& { xaxis["title_font_family"] = value; return *this; }
auto Figure::xaxis_title_font_size(int value)                                 -> Figure& { xaxis["title_font_size"] = value; return *this; }
auto Figure::xaxis_title_standoff(int value)                                  -> Figure& { xaxis["title_standoff"] = value; return *this; }
auto Figure::xaxis_title_text(std::string const& value)                       -> Figure& { xaxis["title_text"] = value; return *this; }
auto Figure::xaxis_type(std::string const& value)                             -> Figure& { xaxis["type"] = value; return *this; }
auto Figure::xaxis_uirevision(std::string const& value)                       -> Figure& { xaxis["uirevision"] = value; return *this; }
auto Figure::xaxis_visible(std::string const& value)                          -> Figure& { xaxis["visible"] = value; return *this; }
auto Figure::xaxis_zeroline(std::string const& value)                         -> Figure& { xaxis["zeroline"] = value; return *this; }
auto Figure::xaxis_zerolinecolor(std::string const& value)                    -> Figure& { xaxis["zerolinecolor"] = value; return *this; }
auto Figure::xaxis_zerolinewidth(int value)                                   -> Figure& { xaxis["zerolinewidth"] = value; return *this; }

//=================================================================================================================
//
// METHODS THAT CUSTOMIZE THE Y-AXIS LAYOUT OF THE FIGURE
//
//=================================================================================================================

auto Figure::yaxis_anchor(std::string const& value)                           -> Figure& { yaxis["anchor"] = value; return *this; }
auto Figure::yaxis_automargin(std::string const& value)                       -> Figure& { yaxis["automargin"] = value; return *this; }
auto Figure::yaxis_autorange(std::string const& value)                        -> Figure& { yaxis["autorange"] = value; return *this; }
auto Figure::yaxis_autotypenumbers(std::string const& value)                  -> Figure& { yaxis["autotypenumbers"] = value; return *this; }
auto Figure::yaxis_calendar(std::string const& value)                         -> Figure& { yaxis["calendar"] = value; return *this; }
// auto Figure::yaxis_categoryarray(std::string const& value)                 -> Figure& { yaxis["categoryarray"] = value; return *this; }
auto Figure::yaxis_categoryorder(std::string const& value)                    -> Figure& { yaxis["categoryorder"] = value; return *this; }
auto Figure::yaxis_color(std::string const& value)                            -> Figure& { yaxis["color"] = value; return *this; }
auto Figure::yaxis_constrain(std::string const& value)                        -> Figure& { yaxis["constrain"] = value; return *this; }
auto Figure::yaxis_constraintoward(std::string const& value)                  -> Figure& { yaxis["constraintoward"] = value; return *this; }
auto Figure::yaxis_dividercolor(std::string const& value)                     -> Figure& { yaxis["dividercolor"] = value; return *this; }
auto Figure::yaxis_dividerwidth(int value)                                    -> Figure& { yaxis["dividerwidth"] = value; return *this; }
// auto Figure::yaxis_domain(std::string const& value)                        -> Figure& { yaxis["domain"] = value; return *this; }
auto Figure::yaxis_dtick(std::string const& value)                            -> Figure& { yaxis["dtick"] = value; return *this; }
auto Figure::yaxis_exponentformat(std::string const& value)                   -> Figure& { yaxis["exponentformat"] = value; return *this; }
auto Figure::yaxis_fixedrange(std::string const& value)                       -> Figure& { yaxis["fixedrange"] = value; return *this; }
auto Figure::yaxis_gridcolor(std::string const& value)                        -> Figure& { yaxis["gridcolor"] = value; return *this; }
auto Figure::yaxis_griddash(std::string const& value)                         -> Figure& { yaxis["griddash"] = value; return *this; }
auto Figure::yaxis_gridwidth(int value)                                       -> Figure& { yaxis["gridwidth"] = value; return *this; }
auto Figure::yaxis_hoverformat(std::string const& value)                      -> Figure& { yaxis["hoverformat"] = value; return *this; }
auto Figure::yaxis_layer(std::string const& value)                            -> Figure& { yaxis["layer"] = value; return *this; }
auto Figure::yaxis_linecolor(std::string const& value)                        -> Figure& { yaxis["linecolor"] = value; return *this; }
auto Figure::yaxis_linewidth(int value)                                       -> Figure& { yaxis["linewidth"] = value; return *this; }
auto Figure::yaxis_matches(std::string const& value)                          -> Figure& { yaxis["matches"] = value; return *this; }
auto Figure::yaxis_minexponent(int value)                                     -> Figure& { yaxis["minexponent"] = value; return *this; }
// auto Figure::yaxis_minor(std::string const& value)                         -> Figure& { yaxis["minor"] = value; return *this; }
auto Figure::yaxis_minor_dtick(std::string const& value)                      -> Figure& { yaxis["minor_dtick"] = value; return *this; }
auto Figure::yaxis_minor_gridcolor(std::string const& value)                  -> Figure& { yaxis["minor_gridcolor"] = value; return *this; }
auto Figure::yaxis_minor_griddash(std::string const& value)                   -> Figure& { yaxis["minor_griddash"] = value; return *this; }
auto Figure::yaxis_minor_gridwidth(int value)                                 -> Figure& { yaxis["minor_gridwidth"] = value; return *this; }
auto Figure::yaxis_minor_nticks(std::string const& value)                     -> Figure& { yaxis["minor_nticks"] = value; return *this; }
auto Figure::yaxis_minor_showgrid(std::string const& value)                   -> Figure& { yaxis["minor_showgrid"] = value; return *this; }
auto Figure::yaxis_minor_tick0(std::string const& value)                      -> Figure& { yaxis["minor_tick0"] = value; return *this; }
auto Figure::yaxis_minor_tickcolor(std::string const& value)                  -> Figure& { yaxis["minor_tickcolor"] = value; return *this; }
auto Figure::yaxis_minor_ticklen(int value)                                   -> Figure& { yaxis["minor_ticklen"] = value; return *this; }
auto Figure::yaxis_minor_tickmode(std::string const& value)                   -> Figure& { yaxis["minor_tickmode"] = value; return *this; }
auto Figure::yaxis_minor_ticks(std::string const& value)                      -> Figure& { yaxis["minor_ticks"] = value; return *this; }
// auto Figure::yaxis_minor_tickvals(std::string const& value)                -> Figure& { yaxis["minor_tickvals"] = value; return *this; }
auto Figure::yaxis_minor_tickwidth(int value)                                 -> Figure& { yaxis["minor_tickwidth"] = value; return *this; }
auto Figure::yaxis_mirror(std::string const& value)                           -> Figure& { yaxis["mirror"] = value; return *this; }
auto Figure::yaxis_nticks(std::string const& value)                           -> Figure& { yaxis["nticks"] = value; return *this; }
auto Figure::yaxis_overlaying(std::string const& value)                       -> Figure& { yaxis["overlaying"] = value; return *this; }
auto Figure::yaxis_position(int value)                                        -> Figure& { yaxis["position"] = value; return *this; }
// auto Figure::yaxis_range(std::string const& value)                         -> Figure& { yaxis["range"] = value; return *this; }
// auto Figure::yaxis_rangebreaks(std::string const& value)                   -> Figure& { yaxis["rangebreaks"] = value; return *this; }
// auto Figure::yaxis_rangebreaks_bounds(std::string const& value)            -> Figure& { yaxis["rangebreaks_bounds"] = value; return *this; }
auto Figure::yaxis_rangebreaks_dvalue(int value)                              -> Figure& { yaxis["rangebreaks_dvalue"] = value; return *this; }
auto Figure::yaxis_rangebreaks_enabled(std::string const& value)              -> Figure& { yaxis["rangebreaks_enabled"] = value; return *this; }
auto Figure::yaxis_rangebreaks_name(std::string const& value)                 -> Figure& { yaxis["rangebreaks_name"] = value; return *this; }
auto Figure::yaxis_rangebreaks_pattern(std::string const& value)              -> Figure& { yaxis["rangebreaks_pattern"] = value; return *this; }
auto Figure::yaxis_rangebreaks_templateitemname(std::string const& value)     -> Figure& { yaxis["rangebreaks_templateitemname"] = value; return *this; }
// auto Figure::yaxis_rangebreaks_values(std::string const& value)            -> Figure& { yaxis["rangebreaks_values"] = value; return *this; }
auto Figure::yaxis_rangemode(std::string const& value)                        -> Figure& { yaxis["rangemode"] = value; return *this; }
// auto Figure::yaxis_rangeselector(std::string const& value)                 -> Figure& { yaxis["rangeselector"] = value; return *this; }
auto Figure::yaxis_rangeselector_activecolor(std::string const& value)        -> Figure& { yaxis["rangeselector_activecolor"] = value; return *this; }
auto Figure::yaxis_rangeselector_bgcolor(std::string const& value)            -> Figure& { yaxis["rangeselector_bgcolor"] = value; return *this; }
auto Figure::yaxis_rangeselector_bordercolor(std::string const& value)        -> Figure& { yaxis["rangeselector_bordercolor"] = value; return *this; }
auto Figure::yaxis_rangeselector_borderwidth(int value)                       -> Figure& { yaxis["rangeselector_borderwidth"] = value; return *this; }
// auto Figure::yaxis_rangeselector_buttons(std::string const& value)         -> Figure& { yaxis["rangeselector_buttons"] = value; return *this; }
auto Figure::yaxis_rangeselector_count(int value)                             -> Figure& { yaxis["rangeselector_count"] = value; return *this; }
auto Figure::yaxis_rangeselector_label(std::string const& value)              -> Figure& { yaxis["rangeselector_label"] = value; return *this; }
auto Figure::yaxis_rangeselector_name(std::string const& value)               -> Figure& { yaxis["rangeselector_name"] = value; return *this; }
auto Figure::yaxis_rangeselector_step(std::string const& value)               -> Figure& { yaxis["rangeselector_step"] = value; return *this; }
auto Figure::yaxis_rangeselector_stepmode(std::string const& value)           -> Figure& { yaxis["rangeselector_stepmode"] = value; return *this; }
auto Figure::yaxis_rangeselector_templateitemname(std::string const& value)   -> Figure& { yaxis["rangeselector_templateitemname"] = value; return *this; }
// auto Figure::yaxis_rangeselector_font(std::string const& value)            -> Figure& { yaxis["rangeselector_font"] = value; return *this; }
auto Figure::yaxis_rangeselector_font_color(std::string const& value)         -> Figure& { yaxis["rangeselector_font_color"] = value; return *this; }
auto Figure::yaxis_rangeselector_font_family(std::string const& value)        -> Figure& { yaxis["rangeselector_font_family"] = value; return *this; }
auto Figure::yaxis_rangeselector_font_size(int value)                         -> Figure& { yaxis["rangeselector_font_size"] = value; return *this; }
auto Figure::yaxis_rangeselector_visible(std::string const& value)            -> Figure& { yaxis["rangeselector_visible"] = value; return *this; }
auto Figure::yaxis_rangeselector_x(int value)                                 -> Figure& { yaxis["rangeselector_x"] = value; return *this; }
auto Figure::yaxis_rangeselector_xanchor(std::string const& value)            -> Figure& { yaxis["rangeselector_xanchor"] = value; return *this; }
auto Figure::yaxis_rangeselector_y(int value)                                 -> Figure& { yaxis["rangeselector_y"] = value; return *this; }
auto Figure::yaxis_rangeselector_yanchor(std::string const& value)            -> Figure& { yaxis["rangeselector_yanchor"] = value; return *this; }
// auto Figure::yaxis_rangeslider(std::string const& value)                   -> Figure& { yaxis["rangeslider"] = value; return *this; }
auto Figure::yaxis_rangeslider_autorange(std::string const& value)            -> Figure& { yaxis["rangeslider_autorange"] = value; return *this; }
auto Figure::yaxis_rangeslider_bgcolor(std::string const& value)              -> Figure& { yaxis["rangeslider_bgcolor"] = value; return *this; }
auto Figure::yaxis_rangeslider_bordercolor(std::string const& value)          -> Figure& { yaxis["rangeslider_bordercolor"] = value; return *this; }
auto Figure::yaxis_rangeslider_borderwidth(std::string const& value)          -> Figure& { yaxis["rangeslider_borderwidth"] = value; return *this; }
// auto Figure::yaxis_rangeslider_range(std::string const& value)             -> Figure& { yaxis["rangeslider_range"] = value; return *this; }
auto Figure::yaxis_rangeslider_thickness(int value)                           -> Figure& { yaxis["rangeslider_thickness"] = value; return *this; }
auto Figure::yaxis_rangeslider_visible(std::string const& value)              -> Figure& { yaxis["rangeslider_visible"] = value; return *this; }
// auto Figure::yaxis_rangeslider_yaxis(std::string const& value)             -> Figure& { yaxis["rangeslider_yaxis"] = value; return *this; }
// auto Figure::yaxis_rangeslider_yaxis_range(std::string const& value)       -> Figure& { yaxis["rangeslider_yaxis_range"] = value; return *this; }
auto Figure::yaxis_rangeslider_yaxis_rangemode(std::string const& value)      -> Figure& { yaxis["rangeslider_yaxis_rangemode"] = value; return *this; }
auto Figure::yaxis_scaleanchor(std::string const& value)                      -> Figure& { yaxis["scaleanchor"] = value; return *this; }
auto Figure::yaxis_scaleratio(int value)                                      -> Figure& { yaxis["scaleratio"] = value; return *this; }
auto Figure::yaxis_separatethousands(std::string const& value)                -> Figure& { yaxis["separatethousands"] = value; return *this; }
auto Figure::yaxis_showdividers(std::string const& value)                     -> Figure& { yaxis["showdividers"] = value; return *this; }
auto Figure::yaxis_showexponent(std::string const& value)                     -> Figure& { yaxis["showexponent"] = value; return *this; }
auto Figure::yaxis_showgrid(std::string const& value)                         -> Figure& { yaxis["showgrid"] = value; return *this; }
auto Figure::yaxis_showline(std::string const& value)                         -> Figure& { yaxis["showline"] = value; return *this; }
auto Figure::yaxis_showspikes(std::string const& value)                       -> Figure& { yaxis["showspikes"] = value; return *this; }
auto Figure::yaxis_showticklabels(std::string const& value)                   -> Figure& { yaxis["showticklabels"] = value; return *this; }
auto Figure::yaxis_showtickprefix(std::string const& value)                   -> Figure& { yaxis["showtickprefix"] = value; return *this; }
auto Figure::yaxis_showticksuffix(std::string const& value)                   -> Figure& { yaxis["showticksuffix"] = value; return *this; }
auto Figure::yaxis_side(std::string const& value)                             -> Figure& { yaxis["side"] = value; return *this; }
auto Figure::yaxis_spikecolor(std::string const& value)                       -> Figure& { yaxis["spikecolor"] = value; return *this; }
auto Figure::yaxis_spikedash(std::string const& value)                        -> Figure& { yaxis["spikedash"] = value; return *this; }
auto Figure::yaxis_spikemode(std::string const& value)                        -> Figure& { yaxis["spikemode"] = value; return *this; }
auto Figure::yaxis_spikesnap(std::string const& value)                        -> Figure& { yaxis["spikesnap"] = value; return *this; }
auto Figure::yaxis_spikethickness(int value)                                  -> Figure& { yaxis["spikethickness"] = value; return *this; }
auto Figure::yaxis_tick0(std::string const& value)                            -> Figure& { yaxis["tick0"] = value; return *this; }
auto Figure::yaxis_tickangle(std::string const& value)                        -> Figure& { yaxis["tickangle"] = value; return *this; }
auto Figure::yaxis_tickcolor(std::string const& value)                        -> Figure& { yaxis["tickcolor"] = value; return *this; }
// auto Figure::yaxis_tickfont(std::string const& value)                      -> Figure& { yaxis["tickfont"] = value; return *this; }
auto Figure::yaxis_tickfont_color(std::string const& value)                   -> Figure& { yaxis["tickfont_color"] = value; return *this; }
auto Figure::yaxis_tickfont_family(std::string const& value)                  -> Figure& { yaxis["tickfont_family"] = value; return *this; }
auto Figure::yaxis_tickfont_size(int value)                                   -> Figure& { yaxis["tickfont_size"] = value; return *this; }
auto Figure::yaxis_tickformat(std::string const& value)                       -> Figure& { yaxis["tickformat"] = value; return *this; }
// auto Figure::yaxis_tickformatstops(std::string const& value)               -> Figure& { yaxis["tickformatstops"] = value; return *this; }
// auto Figure::yaxis_tickformatstops_dtickrange(std::string const& value)    -> Figure& { yaxis["tickformatstops_dtickrange"] = value; return *this; }
auto Figure::yaxis_tickformatstops_enabled(std::string const& value)          -> Figure& { yaxis["tickformatstops_enabled"] = value; return *this; }
auto Figure::yaxis_tickformatstops_name(std::string const& value)             -> Figure& { yaxis["tickformatstops_name"] = value; return *this; }
auto Figure::yaxis_tickformatstops_templateitemname(std::string const& value) -> Figure& { yaxis["tickformatstops_templateitemname"] = value; return *this; }
auto Figure::yaxis_tickformatstops_value(std::string const& value)            -> Figure& { yaxis["tickformatstops_value"] = value; return *this; }
auto Figure::yaxis_ticklabelmode(std::string const& value)                    -> Figure& { yaxis["ticklabelmode"] = value; return *this; }
auto Figure::yaxis_ticklabeloverflow(std::string const& value)                -> Figure& { yaxis["ticklabeloverflow"] = value; return *this; }
auto Figure::yaxis_ticklabelposition(std::string const& value)                -> Figure& { yaxis["ticklabelposition"] = value; return *this; }
auto Figure::yaxis_ticklabelstep(std::string const& value)                    -> Figure& { yaxis["ticklabelstep"] = value; return *this; }
auto Figure::yaxis_ticklen(int value)                                         -> Figure& { yaxis["ticklen"] = value; return *this; }
auto Figure::yaxis_tickmode(std::string const& value)                         -> Figure& { yaxis["tickmode"] = value; return *this; }
auto Figure::yaxis_tickprefix(std::string const& value)                       -> Figure& { yaxis["tickprefix"] = value; return *this; }
auto Figure::yaxis_ticks(std::string const& value)                            -> Figure& { yaxis["ticks"] = value; return *this; }
auto Figure::yaxis_tickson(std::string const& value)                          -> Figure& { yaxis["tickson"] = value; return *this; }
auto Figure::yaxis_ticksuffix(std::string const& value)                       -> Figure& { yaxis["ticksuffix"] = value; return *this; }
// auto Figure::yaxis_ticktext(std::string const& value)                      -> Figure& { yaxis["ticktext"] = value; return *this; }
// auto Figure::yaxis_tickvals(std::string const& value)                      -> Figure& { yaxis["tickvals"] = value; return *this; }
auto Figure::yaxis_tickwidth(int value)                                       -> Figure& { yaxis["tickwidth"] = value; return *this; }
// auto Figure::yaxis_title(std::string const& value)                         -> Figure& { yaxis["title"] = value; return *this; }
// auto Figure::yaxis_title_font(std::string const& value)                    -> Figure& { yaxis["title_font"] = value; return *this; }
auto Figure::yaxis_title_font_color(std::string const& value)                 -> Figure& { yaxis["title_font_color"] = value; return *this; }
auto Figure::yaxis_title_font_family(std::string const& value)                -> Figure& { yaxis["title_font_family"] = value; return *this; }
auto Figure::yaxis_title_font_size(int value)                                 -> Figure& { yaxis["title_font_size"] = value; return *this; }
auto Figure::yaxis_title_standoff(int value)                                  -> Figure& { yaxis["title_standoff"] = value; return *this; }
auto Figure::yaxis_title_text(std::string const& value)                       -> Figure& { yaxis["title_text"] = value; return *this; }
auto Figure::yaxis_type(std::string const& value)                             -> Figure& { yaxis["type"] = value; return *this; }
auto Figure::yaxis_uirevision(std::string const& value)                       -> Figure& { yaxis["uirevision"] = value; return *this; }
auto Figure::yaxis_visible(std::string const& value)                          -> Figure& { yaxis["visible"] = value; return *this; }
auto Figure::yaxis_zeroline(std::string const& value)                         -> Figure& { yaxis["zeroline"] = value; return *this; }
auto Figure::yaxis_zerolinecolor(std::string const& value)                    -> Figure& { yaxis["zerolinecolor"] = value; return *this; }
auto Figure::yaxis_zerolinewidth(int value)                                   -> Figure& { yaxis["zerolinewidth"] = value; return *this; }

} // namespace reaktplot
